# SOF-ELKÂ® Configuration File
# (C)2024 Lewes Technology Consulting, LLC and Megan Roddie
#
# This file parses JSON-formatted Google Workspace logs exported by the
#   Google Workspace Log Collection tool
#   See: https://github.com/dlcowen/sansfor509/blob/main/GWS/gws-log-collection/

filter {
  if [type] == "gws" {

    # timestamp for all JSON-originated log types
    if [raw][id][time] {
      date {
        match => [ "[raw][id][time]", "ISO8601" ]
      }

    # timestamp for CSV-based gmail and message logs
    } else if [raw][date] {
      date {
        match => [ "[raw][date]", "ISO8601" ]
      }
    }

    # pick out fields that are consistent across all potential event records
    mutate {
      rename => {
        "[raw][id][applicationName]" => "application_name"
      }
    }

    # most log types have an array of events in each - this essentially iterates over that array of values
    if [raw][events] {
      split {
        field => "[raw][events]"
      }
    }

    # if there are event parameters, they are not in KV form - this will
    # convert the [ { "name": "foo", "value": "bar" } ] array to [ { "foo": "bar" } ] form
    if [raw][events][parameters] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][events][parameters]"
          "destination_field" => "[raw][event_parameters]"
          "key_field" => "name"
          "val_field" => "value"
        }
      }
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[raw][events][parameters]"
          "destination_field" => "[raw][event_multi_parameters]"
          "key_field" => "name"
          "val_field" => "multiValue"
        }
      }
    }

    if [application_name] == "admin" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "[source][ip]"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_admin" ]
      }

    } else if [application_name] == "drive" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "[source][ip]"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
          "[raw][event_multi_parameters][source_folder_title]" => "source_folder_title"
          "[raw][event_multi_parameters][source_folder_id]" => "source_folder_id"
          "[raw][event_multi_parameters][destination_folder_title]" => "destination_folder_title"
          "[raw][event_multi_parameters][destination_folder_id]" => "destination_folder_id"
          "[raw][event_multi_parameters][old_value]" => "old_value"
          "[raw][event_multi_parameters][new_value]" => "new_value"
        }
        add_tag => [ "gws_drive" ]
      }

    } else if [application_name] == "login" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "[source][ip]"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_login" ]
      }

    } else if [application_name] == "user_accounts" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "[source][ip]"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_user_accounts" ]
      }

    } else if [application_name] == "token" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][ipAddress]" => "[source][ip]"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
          "[raw][event_multi_parameters][scope]" => "event_scope"
        }

        add_tag => [ "gws_token" ]
      }

    } else if [application_name] == "mobile" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }
      }

    } else if [application_name] == "chat" {
      mutate {
        rename => {
          "[raw][actor][email]" => "username"
          "[raw][events][type]" => "event_type"
          "[raw][events][name]" => "event_name"

          "[raw][event_parameters]" => "event_parameters"
        }

        add_tag => [ "gws_chat" ]
      }

    } else if "gmail_log" in [tags] {
      mutate {
        rename => {
          "[raw][event]" => "event_type"
          "[raw][message_id]" => "message_id"
          "[raw][subject]" => "subject"
          "[raw][source_ip]" => "[source][ip]"
          "[raw][traffic_source]" => "traffic_source"
          "[raw][sender_header_address]" => "sender"
          "[raw][recipient_envelope]" => "recipient"
          "[raw][owner]" => "username"
          "[raw][sender_header_name]" => "sender_name"
          "[raw][spam_classification]" => "spam_classification"
          "[raw][spam_classification_reason]" => "spam_classification_reason"
          "[raw][target_link_url]" => "target_link_url"
          "[raw][attachment_hash]" => "attachment_hash"
          "[raw][attachment_name]" => "attachment_name"
          "[raw][attachment_malware_family]" => "attachment_malware_family"
          "[raw][target_attachment_hash]" => "target_attachment_hash"
          "[raw][target_attachment_name]" => "target_attachment_name"
          "[raw][target_attachment_malware_family]" => "target_attachment_malware_family"
          "[raw][link_domain]" => "link_domain"
        }
      }

      # if there are multiple attachments, they come in comma-separated lists (orignally enclosed in double quotes)
      if [attachment_hash] {
        mutate {
          gsub => [ "[attachment_hash]", ", ", "," ]
          split => { "[attachment_hash]" => "," }
        }
      }
      # not sure what this will do if there is a comma in the attachment name...
      if [attachment_name] {
        mutate {
          gsub => [ "[attachment_name]", ", ", "," ]
          split => { "[attachment_name]" => "," }
        }
      }
      if [attachment_malware_family] {
        mutate {
          gsub => [ "[attachment_malware_family]", ", ", "," ]
          split => { "[attachment_malware_family]" => "," }
        }
      }
      if [link_domain] {
        mutate {
          gsub => [ "[link_domain]", ", ", "," ]
          split => { "[link_domain]" => "," }
        }
      }

    } else if "gmail_message" in [tags] {
      mutate {
        rename => {
          "[raw][subject]" => "subject"
          "[raw][message_id]" => "message_id"
          "[raw][owner]" => "username"
          "[raw][sender]" => "sender"
          "[raw][recipient]" => "recipient"
          "[raw][label]" => "label"
          "[raw][attachment_name]" => "attachment_name"
        }
      }

      if [label] {
        mutate {
          gsub => [ "[label]", ", ", "," ]
          split => { "label" => "," }
        }
      }
      # not sure what this will do if there is a comma in the attachment name...
      if [attachment_name] {
        mutate {
          gsub => [ "[attachment_name]", ", ", "," ]
          split => { "[attachment_name]" => "," }
        }
      }
    }
 
    # remove angle brackets from the message id
    if [message_id] {
      mutate {
        gsub => [ "message_id", "[<>]", "" ]
      }
    }

    # for some records, destination IP is blank, which will break subsequent parser operations
    if [destination][ip] == '' {
      mutate {
        remove_field => [ "[destination][ip]" ]
      }
    }

    # remove remaining fields
    mutate {
      remove_field => [ "raw" ]
    }
  }
}
