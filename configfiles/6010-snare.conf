# SOF-ELKÂ® Configuration File
# (C)2024 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for Windows Event Log messages sent via the Snare utility

# From: https://prophecyinternational.atlassian.net/wiki/spaces/WADOC/pages/1233224043/Appendix+A+-+Windows+Event+Output+Format
# Snare event record format
# The format of the event record is as follows:
#| Number | Field | Description |
#| :---- | ----: | :----: |
#| 1 | Hostname | The assigned hostname of the machine or the override value entered using the Snare front.
#| 2 | Event Log Type | Fixed value of 'MSWinEventLog'.
#| 3 | Criticality | This is determined by the Alert level given to the objective by the user and is a number between 0 and 4, as detailed in the registry settings in Appendix B.
#| 4 | LogName | This is the Windows Event Log from which the event record was derived. In the above example, the event record was derived from the 'security' event log.
#| 5 | Snare Event Counter | Based on the internal Snare event counter. Rotates at 'MAXDWORD'.
#| 6 | DateTime | This is the date time stamp of the event record.
#| 7 | EventID | This is the Windows Event ID.
#| 8 | SourceName | This is the Windows Event Log from which the event record was derived. In the above example, the event record was derived from the 'security' event log.
#| 9 | UserName | This is the Window's user name.
#| 10 | SIDType | This is the type of SID used. In the above example, it is a 'user' SID, but it may also be a 'computer' or other type of SID.
#| 11 | EventLogType | This can be anyone of 'Success Audit', 'Failure Audit', 'Error', 'Information', or 'Warning'.
#| 12 | ComputerName | This is the Windows computer name.
#| 13 | CategoryString | This is the category of audit event, as detailed by the Windows event logging system.
#| 14 | DataString | This contains the data strings.
#| 15 | ExpandedString | This contains the expanded data strings.
#| 16 | EventSourceId | (optional). Additional data to be included in each event as specified in Event Options settings of the Agent.
#| 17 | MD5 Checksum | (optional). An md5 checksum of the event can optionally be included with each event sent over the network by the Snare for Windows agent. Note that the application that evaluates each record will need to strip the final delimiter, plus the checksum, prior to evaluating the event.

filter {
  # handle snare records
  if [labels][type] == "syslog" and "snare_log" in [tags] {
    csv {
      columns => [ "event_criticality", "event_logsource", "snare_counter", "event_datetime_system_tz", "event_id", "event_source", "username", "event_sidtype", "event_logtype", "hostname", "event_category", "event_fulldata", "event_source_id", "event_md5" ]
      separator => "||"
      skip_empty_columns => "true"
      skip_empty_rows => "true"
      remove_field => [ "message" ]
      convert => {
        "event_criticality" => "integer"
        "event_id" => "integer"
        "event_source_id" => "integer"
        "snare_counter" => "integer"
      }
    }
    # Fri Dec 30 19:01:17 2022
    # this is in SYSTEM LOCAL TIME (ugh) so while it's important to retain, it'll show as UTC in the index by default.  beware!
    if [event_datetime_system_tz] {
      date {
        match => [ "event_datetime_system_tz", "EEE MMM dd HH:mm:ss yyyy"]
        target => "event_datetime_system_tz"
      }
    }
  }
  if [event_source_id] == "N/A" {
    mutate {
      remove_field => [ "event_source_id" ]
    }
  }

  # there is no useful [log][syslog][appname] in a snare message (it contains the hostname), so replace it with the event_source value
  if [event_source] {
    mutate {
      replace => { "[log][syslog][appname]" => "%{event_source}" }
    }
  }

  if [event_fulldata] {
    # replace directory separators so they don't confuse the parser as an escape character
    # the replace syntax is odd because backslashes
    mutate {
      gsub => [ "[event_fulldata]", "[\\]", "/" ]
    }

# TODO: this was previously "^%{DATA:event_base_data}    %{DATA:event_expanded_data}$" but that seems to have changed with recent test data
#       need to confirm with conforming source data and adjust back as needed
    grok {
      match => { "event_fulldata" => [
        "^%{DATA:event_base_data}    %{DATA:event_expanded_data}$",
        "^%{DATA:event_base_data}:  %{DATA:event_expanded_data}$"
        ]
      }
      tag_on_failure => [ "no_data_summary" ]
    }

    if "no_data_summary" in [tags] {
      mutate {
        replace => { "message" => "%{event_fulldata}" }
        remove_tag => [ "no_data_summary" ]
      }

    } else {
      mutate {
        replace => { "message" => "%{event_base_data}" }
        add_tag => [ "parse_done" ]
      }
# HANDLED:
# event_source = Microsoft-Windows-Security-Auditing
# event_source = Microsoft-Windows-Sysmon
## Process Create
## Registry Value Set
## File Created
## Dns query
## Driver loaded
## Network connection detected
## Process terminated
## Registry object added or deleted
## File creation time changed
## Sysmon service state changed
## CreateRemoteThread detected
## File stream created (TODO: NEED WINLOGBEAT SAMPLE)
## A process has exited (TODO: NEED WINLOGBEAT SAMPLE)



# # KNOWN FAILED/UNHANDLED PARSES:
# ## A new process has been created. (need sample)
# ## Group membership information. (lots of double spaces that screw up the special handling)
# ## An account was successfully logged on.
# ## Special privileges assigned to new logon.

# # need snare samples with:
# ## TargetProcessGuid
# ## SchemaVersion
# ## Signature
# ## SignatureStatus
# ## Signed
# ## SourceImage
# ## SourceProcessGuid
# ## SourceProcessId
# ## SourceUser
# ## StartFunction
# ## StartModule
# ## State
# ## TargetImage
# ## TargetProcessId
# ## TargetUser
# ## Version

# Observed fields not yet handled in Grok
## DestinationPortName
## SourcePortName
## Privileges

# Unobserved fields not yet handled in Grok
## Requested Operation
## Desired Access
## Service
## Server
## Service Name
## Process
## Process name
## Service Request Information

#TODO: NEED TO ADD ALL THESE TO THE FIELD LIST DOCUMENT
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        break_on_match => false
        match => { "[event_expanded_data]" => [
          "Security ID: +%{WINSID:[user][id]}",
          "Account Name: +%{WINUSER:[user][name]}",
          "Account Domain: +%{WINDOMAIN:[user][domain]}",
          "Logon ID: +%{WORD:[winlog][event_data][LogonID]}",
          "Process ID: +%{WORD:[winlog][process][pid]}",
          "Process Name: +%{DATA:[process][executable]}  ",
          "Exit Status: +%{NOTSPACE:[process][exit_code]}",

          "(?:^| )CommandLine: +%{DATA:[process][command_line]}  ",
          "Company: +%{WORD:[winlog][event_data][Company]}  ",
          "Contents: +%{WORD:[winlog][event_data][Contents]}  ",
          "CreationUtcTime: +%{TIMESTAMP_ISO8601:[winlog][event_data][CreationUtcTime]}",
          "CurrentDirectory: +%{DATA:[process][working_directory]}\\  ",
          "Description: +%{WORD:[winlog][event_data][Description]}  ",
          "DestinationHostname: +%{NOTSPACE:[destination][domain]}",
          "DestinationIp: +%{IP:[destination][ip]}",
          "DestinationPort: +%{POSINT:[destination][port]}",
          "Details: +%{DATA:[winlog][event_data][Details]}  ",
          "EventType: +%{WORD:[winlog][event_data][EventType]}",
          "FileVersion: +%{DATA:[process][pe][file_version]}  ",
          "Hashes: +%{DATA:[@metadata][Hashes]}  ",
          "IntegrityLevel: +%{DATA:[winlog][event_data][IntegrityLevel]}  ",
          "(?:^| )Image: +%{DATA:[process][executable]}  ",
          "Initiated: +%{WORD:[@metadata][Initiated]}",
          "LogonGuid: +%{GUID:[winlog][event_data][LogonGuid]}",
          "LogonId: +%{WORD:[winlog][event_data][LogonId]}",
          "OriginalFileName: +%{DATA:[process][pe][original_file_name]}  ",
          "ParentCommandLine: +%{DATA:[process][parent][command_line]}  ",
          "ParentImage: +%{WINPATH:[process][parent][executable]}  ",
          "ParentProcessGuid: +%{GUID:[process][parent][entity_id]}",
          "ParentProcessId: +%{POSINT:[process][parent][pid]}",
          "ParentUser: +%{WINDOMAINUSER:[winlog][event_data][ParentUser]}",
          "PreviousCreationUtcTime: +%{TIMESTAMP_ISO8601:[winlog][event_data][PreviousCreationUtcTime]}",
          "(?:^| )ProcessGuid: +%{GUID:[process][entity_id]}",
          "(?:^| )ProcessId: +%{POSINT:[process][pid]}",
          "Product: +%{DATA:[winlog][event_data][Product]}  ",
          "Protocol: +%{WORD:[network][transport]}",
          "QueryName: +%{HOSTNAME:[dns][question][name]}",
          "QueryResults: +%{DATA:[@metadata][QueryResults]}  ",
          "RuleName: +%{DATA:[rule][name]}  ",
          "SchemaVersion: +%{NUMBER:[winlog][event_data][SchemaVersion]}",
          "Signature: +%{DATA:[winlog][event_data][Signature]}  ",
          "SignatureStatus: +%{WORD:[winlog][event_data][SignatureStatus]}",
          "Signed: +%{WORD:[winlog][event_data][Signed]}",
          "SourceHostname: +%{HOSTNAME:[source][domain]}",
          "SourceImage: +%{DATA:[process][executable]}  ",
          "SourceIp: +%{IP:[source][ip]}",
          "SourcePort: +%{POSINT:[source][port]}",
          "SourceProcessGuid: +%{GUID:[process][entity_id]}",
          "SourceProcessId: +%{POSINT:[process][pid]}",
          "SourceUser: +%{WINDOMAINUSER:[winlog][event_data][SourceUser]}",
          "StartAddress: +%{WORD:[winlog][event_data][StartAddress]}",
          "StartFunction: +%{DATA:[winlog][event_data][StartFunction]}  ",
          "StartModule: +%{DATA:[winlog][event_data][StartModule]}  ",
          "State: +%{WORD:[winlog][event_data][State]}",
          "TargetFilename: +%{DATA:[file][path]}  ",
          "TargetImage: +%{DATA:[winlog][event_data][TargetImage]}  ",
          "TargetObject: +%{DATA:[registry][path]}  ",
          "TargetProcessGuid: +%{GUID:[winlog][event_data][TargetProcessGuid]}",
          "TargetProcessId: +%{POSINT:[winlog][event_data][TargetProcessId]}",
          "TargetUser: +%{WINDOMAINUSER:[winlog][event_data][TargetUser]}",
          "TerminalSessionId: +%{POSINT:[winlog][event_data][TerminalSessionId]}",
          "(?:^| )User: +%{WINDOMAINUSER:[@metadata][User]}",
          "(?:^| )UtcTime: +%{TIMESTAMP_ISO8601:[@metadata][UtcTime]}",
          "(?:^| )Version: +%{NUMBER:[winlog][event_data][Version]}",

# these come from e.g. "Contents: [ZoneTransfer]  ZoneId=3  ReferrerUrl=https://cyberduck.io/  HostUrl=https://a48823c7ec3cf4539564-60c534a1284a12ce74ef84032e9b4e46.ssl.cf1.rackcdn.com/Cyberduck-Installer-9.0.0.41777.exe"
          "HostUrl=%{FULL_URL:[winlog][event_data][HostUrl]}",
          "ReferrerUrl=%{FULL_URL:[winlog][event_data][ReferrerUrl]}",
          "ZoneId=%{POSINT:[winlog][event_data][ZoneId]}"
          ]
        }
      }

    # if this exists, use it over the syslog datetime since it's in UTC
    if [@metadata][UtcTime] {
      date {
        match => [ "[@metadata][UtcTime]", "ISO8601" ]
      }
    }
    # Split these into their individual hash type fields
    if [@metadata][Hashes] {
      kv {
        source => "[@metadata][Hashes]"
        target => "kvhashes"
        field_split => ","
      }
      if [kvhashes] {
        mutate {
          rename => {
            "[kvhashes][MD5]" => "[process][hash][md5]"
            "[kvhashes][SHA256]" => "[process][hash][sha256]"
            "[kvhashes][IMPHASH]" => "[process][pe][imphash]"
          }
        }
      if [process][hash][md5] { mutate { merge => { "[related][hash]" => "[process][hash][md5]" } } }
      if [process][hash][sha256] { mutate { merge => { "[related][hash]" => "[process][hash][sha256]" } } }
      if [process][pe][imphash] { mutate { merge => { "[related][hash]" => "[process][pe][imphash]" } } }
      }
    }

# TODO: what about other usernames grok'ed with the WINDOMAINUSER format?
    if [@metadata][User] {
      mutate { add_tag => [ "entry" ] }
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => { "[@metadata][User]" => [
          "%{WINDOMAIN:[winlog][user][domain]}/%{WINUSER:[winlog][user][name]}"
          ]
        }
      }
      mutate { merge => { "[related][user]" => "[winlog][user][name]" } }
    }

    # DNS query results - strip IPv6 oddity and then split on semicolon
    if [@metadata][QueryResults] {
      mutate {
        gsub => [ "[@metadata][QueryResults]", "::ffff:", "" ]
        split => { "[@metadata][QueryResults]" => ";" }
      }
      mutate {
        rename => {
          "[@metadata][QueryResults]" => "[dns][answers][data]"
        }
      }
    }

    # establish directionality
    # TODO: this may be broken due to the first conditional and how it handles booleans. ugh.
    if [@metadata][Initiated] {
      if [@metadata][Initiated] == 'true' {
        mutate {
          add_field => { "[network][direction]" => "egress" }
        }
      } else if [@metadata][Initated] == 'false' {
        mutate {
          add_field => { "[network][direction]" => "ingress" }
        }
      }
    }

    # format times as times
    if [winlog][event_data][CreationUtcTime] {
      date {
        match => [ "[winlog][event_data][CreationUtcTime]", "ISO8601" ]
        target => "[winlog][event_data][CreationUtcTime]"
      }
    }
    if [winlog][event_data][PreviousCreationUtcTime] {
      date {
        match => [ "[winlog][event_data][PreviousCreationUtcTime]", "ISO8601" ]
        target => "[winlog][event_data][PreviousCreationUtcTime]"
      }
    }

    # get integeer from text
    if [network][transport] {
      translate {
        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/ip_proto_name2int.yaml"
        source => "[network][transport]"
        target => "[network][iana_number]"
      }
    }

    # rename anything left and make copies as needed to satisfy ECS needs
    mutate {
      rename => {
        "event_id" => "[winlog][event_id]"
        "event_source" => "[event][provider]"
      }
      copy => {
        "hostname" => "[winlog][computer_name]"
        "[event][provider]" => "[winlog][provider_name]"
        "[winlog][event_data][Description]" => "[process][pe][description]"
        "[winlog][event_data][Product]" => "[process][pe][product]"
        "[winlog][event_data][Company]" => "[process][pe][company]"
        "[winlog][user][domain]" => "[user][domain]"
        "[winlog][user][name]" => "[user][name]"
      }
      # add_field => {
      #
      # }
    }

    # TODO: if there is a winlog.process.pid and no process.pid, get it from the hex

    # Empty rule names are "-" and sometimes there are multiple comma-separated values
    if [rule][name] {
      if [rule][name] == "-" {
        mutate {
          remove_field => [ "[rule][name]" ]
        }
      } else {
        mutate {
          split => { "[rule][name]" => "," }
        }
      }
    }

## TODO: convert types

### TODO: re-enable this
    # mutate {
    #   remove_field => [ "event_fulldata", "kv", "kvhashes" ]
                          # remove event_expanded_data????
    # }
    }
  }
}
